import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import org.junit.Assert;
import org.junit.Assert.*;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class test {
	
	@Test
	public void threaderTest() {
		ExecutorService executorService = Executors.newFixedThreadPool(1);
		List<Long> test = Collections.synchronizedList(new ArrayList<Long>());
		Threader t = new FermatThreader(0,10,0, test);
		executorService.submit(t);
		Object[] primzahlen= {2L,3L,5L,7L};
		executorService.shutdown();
		try {
			if (executorService.awaitTermination(1, TimeUnit.MINUTES)) {
				System.out.println(Arrays.toString(test.toArray()));
				Assert.assertArrayEquals(test.toArray(), primzahlen);
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
	}
	@Test
	public void MillerRabinTest() {
		ExecutorService executorService = Executors.newFixedThreadPool(1);
		List<Long> test = Collections.synchronizedList(new ArrayList<Long>());
		Threader t = new MillerRabinThreader(0,10,0, test);
		executorService.submit(t);
		Object[] primzahlen= {2L,3L,5L,7L};
		executorService.shutdown();
		try {
			if (executorService.awaitTermination(1, TimeUnit.MINUTES)) {
				System.out.println(Arrays.toString(test.toArray()));
				Assert.assertArrayEquals(test.toArray(), primzahlen);
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
	}
	@Test
	public void SolovayStrassenTest() {
		ExecutorService executorService = Executors.newFixedThreadPool(1);
		List<Long> test = Collections.synchronizedList(new ArrayList<Long>());
		Threader t = new SolovayStrassenThreader(0,10,0, test);
		executorService.submit(t);
		Object[] primzahlen= {2L,3L,5L,7L};
		executorService.shutdown();
		try {
			if (executorService.awaitTermination(1, TimeUnit.MINUTES)) {
				System.out.println(Arrays.toString(test.toArray()));
				Assert.assertArrayEquals(test.toArray(), primzahlen);
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	@Test
	public void siebAtkinTest() {
		ExecutorService executorService = Executors.newFixedThreadPool(1);
		List<Long> test = Collections.synchronizedList(new ArrayList<Long>());
		siebThreader t = new siebAtkin(0,10,0, test);
		executorService.submit(t);
		Object[] primzahlen= {2L,3L,5L,7L};
		executorService.shutdown();
		try {
			if (executorService.awaitTermination(1, TimeUnit.MINUTES)) {
				System.out.println(Arrays.toString(test.toArray()));
				Assert.assertArrayEquals(test.toArray(), primzahlen);
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	@Test
	public void siebEratosthenesTest() {
		ExecutorService executorService = Executors.newFixedThreadPool(1);
		List<Long> test = Collections.synchronizedList(new ArrayList<Long>());
		siebThreader t = new siebEratosthenes(0,10,0, test);
		executorService.submit(t);
		Object[] primzahlen= {2L,3L,5L,7L};
		executorService.shutdown();
		try {
			if (executorService.awaitTermination(1, TimeUnit.MINUTES)) {
				System.out.println(Arrays.toString(test.toArray()));
				Assert.assertArrayEquals(test.toArray(), primzahlen);
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	@Test
	public void primZahlTest() {
		ExecutorService executorService = Executors.newFixedThreadPool(1);
		List<Long> test = Collections.synchronizedList(new ArrayList<Long>());
		siebThreader t = new siebEratosthenes(0,10,0, test);
		executorService.submit(t);
		Object[] primzahlen= {2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L};
		executorService.shutdown();
		try {
			if (executorService.awaitTermination(1, TimeUnit.MINUTES)) {
				System.out.println(Arrays.toString(test.toArray()));
				Assert.assertArrayEquals(test.toArray(), primzahlen);
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
}
